// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  payments      Payment[]
  blogPosts     BlogPost[]
  comments      Comment[]
  profile       UserProfile?
}

model UserProfile {
  id                String  @id @default(cuid())
  userId            String  @unique
  firstName         String?
  lastName          String?
  phone             String?
  company           String?
  jobTitle          String?
  experience        String?
  inquiringFor      String?
  bio               String?
  linkedinUrl       String?
  twitterUrl        String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Course management
model Course {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  shortDesc   String?
  image       String?
  price       Decimal?
  category    String
  level       CourseLevel @default(BEGINNER)
  duration    String?
  status      CourseStatus @default(DRAFT)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  modules     CourseModule[]
  enrollments Enrollment[]
  payments    Payment[]
}

model CourseModule {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String?  @db.Text
  order       Int
  duration    String?
  videoUrl    String?
  content     String?  @db.Text
  resources   String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id         String   @id @default(cuid())
  moduleId   String
  title      String
  content    String   @db.Text
  videoUrl   String?
  order      Int
  duration   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  module CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id           String           @id @default(cuid())
  userId       String
  courseId     String
  status       EnrollmentStatus @default(ACTIVE)
  progress     Int              @default(0)
  completedAt  DateTime?
  enrolledAt   DateTime         @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

// Blog management
model BlogPost {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String      @db.Text
  excerpt     String?
  image       String?
  status      PostStatus  @default(DRAFT)
  featured    Boolean     @default(false)
  authorId    String
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]
  tags     BlogTag[]
}

model BlogTag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique

  posts BlogPost[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Payment management
model Payment {
  id              String        @id @default(cuid())
  userId          String
  courseId        String?
  amount          Decimal
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?
  paymentMethod   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  course Course? @relation(fields: [courseId], references: [id])
}

// Enums
enum UserRole {
  USER
  ADMIN
  INSTRUCTOR
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
